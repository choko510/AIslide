AI協調型スライドエディター「SlideGenius」最終仕様書
バージョン: 1.0（最終更新: 2025年6月19日）
作成者: AIアシスタント

---

# 1. プロジェクト概要

## 1.1 プロジェクト名
- SlideGenius（スライドジーニアス）

## 1.2 コンセプト
- 「アイデアを、瞬時に、最高のカタチに。」
- AIとの対話で、構成・デザイン・アニメーションまで半自動化。
- 直感的な操作でプロ品質の動的スライドを作成できるWebアプリ。

## 1.3 ターゲットユーザー
- ビジネスパーソン：資料作成の効率化
- 学生・研究者：構成やデザインに自信がない方
- 教育関係者：分かりやすい授業資料を効率的に作りたい方
- クリエイター：アイデアを素早く形にしたい方

---

# 2. 機能要件

AIによる自動生成と手動編集のシームレスな両立を重視。

## 2.1 コアエディター
- スライド管理（一覧表示・追加・複製・削除・順序変更）
- オブジェクト操作（テキスト・画像・図形追加、移動、リサイズ、回転、コピー、削除）
- プロパティパネル（フォント・色・線の太さ・透明度など）
- レイヤー管理（重ね順変更）
- レイアウト支援（スマートガイド・グリッド・ショートカットキー）

## 2.2 AIアシスタント「Genius Chat」
- チャットUIで構成案・デザイン案をAIが提案
- ユーザー指示でリアルタイムに内容・デザイン・アニメーションを調整

## 2.3 アニメーション
- オブジェクトごとにエフェクト・タイミング設定
- スライド間トランジション

## 2.4 プレゼンテーションモード
- フルスクリーン再生、アニメーション・トランジション対応
- キーボード操作

## 2.5 データ管理
- 自動保存、PDF/PNG/JPEGエクスポート

---

# 3. 技術仕様

## 3.1 フロントエンド
- Vanilla JS, HTML5, CSS3
- Web ComponentsによるUI部品化
- Fabric.jsでキャンバス描画・操作
- Tailwind CSSで高速UI開発
- 状態管理：XState（推奨）

## 3.2 バックエンド
- Python（FastAPI）
- Google Generative AI SDK（Gemini API連携）
- SQLite（SQLModel）
- ファイル保存：サーバー内ファイルシステム

---

# 4. 実装スケジュール

## 4.1 マイルストーン
- M1: セットアップ・技術検証
- M2: コアUI
- M3: AI連携
- M4: アニメーション
- M5: プレゼン・データ管理
- M6: テスト・レビュー

## 4.2 実装順序（抜粋）
1. プロジェクトセットアップ
2. コアエディターUI
3. テキスト・画像・図形編集
4. レイアウト支援・ショートカット
5. AIアシスタント連携
6. アニメーション・トランジション
7. プレゼンテーションモード
8. データ管理・エクスポート
9. コメント・共同編集
10. テスト・レビュー

---

# 5. 機能詳細

## 5.1 コアエディター
- スライド管理UI（サムネイル一覧・順序変更・複製・削除）
- オブジェクト操作（追加・選択・移動・リサイズ・回転・複数選択・コピー・削除・重ね順）
- プロパティパネル（動的切替）
- レイヤー管理（順序変更・表示/非表示・ロック）
- レイアウト支援（スマートガイド・グリッド・ショートカットキー）
- テキスト・画像・図形編集（装飾・フィルター・グループ化等）
- 拡張性：Web Componentsで再利用性確保

## 5.2 AIアシスタント
- チャットUI常駐
- 構成生成・デザイン自動生成・リファイン

## 5.3 アニメーション
- オブジェクトアニメーション・スライドトランジション

## 5.4 プレゼンテーションモード
- フルスクリーン・アニメーション再生・キーボード操作

## 5.5 データ管理
- 自動保存・エクスポート・サーバー連携

---

# 6. AIとの対話によるスライド作成手順（詳細）

1. テーマ入力
   - 右ペインの「Genius Chat」に、作成したいプレゼンのテーマや目的を入力します。
   - 例：「新製品の紹介プレゼン」「AI技術の基礎解説」など。

2. AIによるヒアリング
   - AIが目的・ターゲット・伝えたいポイントなどを追加で質問します。
   - ユーザーはチャット形式で回答。

3. 構成案の自動生成
   - AIがタイトル、目次、各章の見出しや流れをリストで提案します。
   - ユーザーは「この章を追加」「順番を変えて」などの指示が可能。

4. スライド内容の自動生成
   - 確定した構成に基づき、各スライドの本文や要点をAIが自動生成。
   - 例：「この章は箇条書きで」「図解を入れて」などの追加指示も可能。

5. デザイン・レイアウトの提案
   - AIが内容に合ったレイアウトや配色、画像・グラフの挿入を提案。
   - 「全体を青基調に」「グラフを追加」などの要望もチャットで伝えられます。

6. アニメーション・演出の設定
   - 「このスライドに動きをつけて」「タイトルを目立たせて」などの指示で、AIが最適なアニメーションや演出を提案・適用。

7. リアルタイムリファイン
   - 途中で「この部分をもっと簡潔に」「画像を差し替えて」など、細かな修正指示も随時チャットで可能。

8. 完成・エクスポート
   - 完成したスライドは、プレビュー・修正後、PDF/PNG/JPEG形式でエクスポートできます。

---

# 7. 実装方法・使用ライブラリ詳細

## 7.1 フロントエンド
- **Vanilla JS (ES6+)**: 主要なロジック・UI制御をシンプルなJavaScriptで実装。
- **Web Components**: `customElements`・`Shadow DOM`を活用し、再利用可能なUI部品（スライドサムネイル、ツールボックス、プロパティパネル等）を構築。
- **Fabric.js**: キャンバス描画・オブジェクト操作（追加・移動・リサイズ・回転・アニメーション）を担当。`canvas.toJSON()`/`loadFromJSON()`で状態保存・復元。
- **Tailwind CSS**: ユーティリティファーストなCSSフレームワーク。AIによる動的なクラス付与でデザインを柔軟に変更。
- **XState**: UIの状態遷移（AI対話中・編集中・プレビュー中など）を状態マシンで厳密に管理。
- **その他**: 
  - `FileSaver.js`（エクスポート用）
  - `html2canvas`（スライド画像化）
  - `jsPDF`（PDF出力）

## 7.2 バックエンド
- **Python 3.10+**: サーバーサイド全般。
- **FastAPI**: REST API・WebSocketサーバー。自動ドキュメント生成（Swagger UI）。
- **Google Generative AI SDK**: Gemini APIと連携し、AIチャット・構成/デザイン/文章生成を実現。
- **SQLModel**: ORMとしてDBモデルをPythonクラスで定義。SQLiteと連携。
- **SQLite**: 軽量なファイルDB。ユーザー・スライド・履歴などを管理。
- **Starlette**: FastAPIの基盤。WebSocketやCORS対応。
- **Pydantic**: 入出力バリデーション・スキーマ自動生成。
- **Uvicorn**: ASGIサーバーとしてFastAPIを高速実行。
- **その他**:
  - `aiofiles`（非同期ファイル操作）
  - `python-multipart`（ファイルアップロード）

## 7.3 AI連携の実装例
- Gemini APIへのリクエストは`google-generativeai`の`GenerativeModel`クラスを利用。
- ユーザーのチャット入力をAPIに投げ、構成案やデザイン案をJSON形式で受信。
- 受信データをフロントエンドにWebSocketでリアルタイム送信。

## 7.4 データ保存・エクスポート
- スライド状態はFabric.jsのJSONで保存し、DBに紐付け。
- エクスポート時は`html2canvas`で画像化、`jsPDF`でPDF化。
- 画像・ファイルはサーバーの指定ディレクトリに保存。

## 7.5 テスト・CI/CD
- **pytest**（API・DBテスト）
- **Jest**（フロントエンド単体テスト）
- **GitHub Actions**（自動テスト・デプロイ）

---

# 8. アカウント機能（追加）

## 8.1 機能概要
- ユーザーごとにスライドや履歴を管理できるアカウント機能を実装。
- サインアップ・ログイン・ログアウト・パスワードリセット対応。
- Googleアカウント等の外部認証（OAuth）にも対応可能。

## 8.2 画面・UI
- ヘッダー右上に「ログイン」「アカウント」ボタンを設置。
- サインアップ/ログイン用のモーダルダイアログまたは専用ページ。
- ログイン後はユーザー名・アイコン表示、アカウント設定・ログアウトメニュー。

## 8.3 バックエンド実装
- **FastAPI**の`Depends`で認証ガードを実装。
- **SQLModel**で`User`テーブル（id, email, hashed_password, created_at等）を追加。
- パスワードは`bcrypt`等でハッシュ化。
- JWT（JSON Web Token）でセッション管理。
- OAuth認証は`authlib`や`fastapi-users`等のライブラリを利用。

## 8.4 フロントエンド実装
- サインアップ/ログインフォームをWeb Componentsで実装。
- ログイン状態は`localStorage`や`cookie`で管理。
- APIとの通信は`fetch`でトークンを付与。

## 8.5 ユースケース
- 新規登録→メール認証→ログイン→スライド作成・保存
- ログインユーザーのみスライドの保存・履歴・エクスポートが可能
- パスワードリセットやアカウント削除もサポート

---

# 9. 共同編集機能（詳細設計）

## 9.1 機能概要
- 複数ユーザーが同時に同じスライドを編集可能。
- 編集内容はリアルタイムで全ユーザーに反映。
- 編集者のカーソル・選択範囲・操作履歴を可視化。
- コメント・チャット機能でコミュニケーションをサポート。

## 9.2 UI/UX設計
- 編集中ユーザーのアイコン・名前を画面上部に表示。
- 他ユーザーの選択オブジェクトやカーソル位置を色分け表示。
- コメントはスライド単位・オブジェクト単位で付与可能。
- 画面右側にリアルタイムチャットパネルを設置。

## 9.3 バックエンド設計
- **WebSocket**（FastAPI/Starlette）でリアルタイム通信を実装。
- スライドごとに「ルーム」を生成し、参加ユーザーを管理。
- 編集操作（オブジェクト追加・移動・削除・プロパティ変更等）は差分データとして送信。
- 衝突解決は「楽観的ロック」＋「最終編集者優先」または「OT（Operational Transformation）」方式を検討。
- コメント・チャットはDB（`SlideComment`テーブル等）に保存。

## 9.4 フロントエンド設計
- WebSocketクライアントでサーバーと常時接続。
- 編集操作を即時ローカル反映し、サーバーへ送信。
- サーバーからの差分データを受信し、他ユーザーの操作を反映。
- 他ユーザーのカーソル・選択範囲を色付きで表示。
- コメント・チャットUIをWeb Componentsで実装。

## 9.5 権限・履歴管理
- オーナー・編集者・閲覧者の権限を設定可能。
- 編集履歴はユーザーごとに記録し、差分表示・ロールバックも可能。
- 共同編集の招待はメール・リンク共有で実現。

## 9.6 使用技術・ライブラリ
- **FastAPI/Starlette WebSocket**: リアルタイム通信
- **Yjs**や**ShareDB**（OT/CRDTライブラリ）: 差分同期・衝突解決
- **SQLModel**: コメント・履歴のDB管理
- **uuid**: ルームID・ユーザーID生成

---