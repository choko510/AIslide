# AI協調型スライドエディター「AIslide」最終仕様書

バージョン: 1.0（最終更新: 2025年6月19日）  
作成者: AIアシスタント

---

## 目次
1. [プロジェクト概要](#1-プロジェクト概要)
2. [機能要件](#2-機能要件)
3. [技術仕様](#3-技術仕様)
4. [マイルストーン・実装順序](#4-マイルストーン実装順序改訂版)
5. [機能詳細](#5-機能詳細)
6. [AIとの対話によるスライド作成手順](#6-aiとの対話によるスライド作成手順詳細)
7. [実装方法・使用ライブラリ詳細](#7-実装方法使用ライブラリ詳細)
8. [アカウント機能](#8-アカウント機能追加)
9. [共同編集機能](#9-共同編集機能詳細設計)

---

# 1. プロジェクト概要

## 1.1 プロジェクト名
- AIslide

## 1.2 コンセプト
- 「アイデアを、瞬時に、最高のカタチに。」
- AIとの対話で、構成・デザイン・アニメーションまで半自動化。
- 直感的な操作でプロ品質の動的スライドを作成できるWebアプリ。

## 1.3 ターゲットユーザー
- ビジネスパーソン：資料作成の効率化
- 学生・研究者：構成やデザインに自信がない方
- 教育関係者：分かりやすい授業資料を効率的に作りたい方
- クリエイター：アイデアを素早く形にしたい方

---

# 2. 機能要件

AIによる自動生成と手動編集のシームレスな両立を重視。

## 2.1 コアエディター
- スライド管理（一覧表示・追加・複製・削除・順序変更）
- オブジェクト操作（テキスト・画像・図形追加、移動、リサイズ、回転、コピー、削除）
- プロパティパネル（フォント・色・線の太さ・透明度など）
- レイヤー管理（重ね順変更）
- レイアウト支援（スマートガイド・グリッド・ショートカットキー）

## 2.2 AIアシスタント「Genius Chat」
- チャットUIで構成案・デザイン案をAIが提案
- ユーザー指示でリアルタイムに内容・デザイン・アニメーションを調整

## 2.3 アニメーション
- オブジェクトごとにエフェクト・タイミング設定
- スライド間トランジション

## 2.4 プレゼンテーションモード
- フルスクリーン再生、アニメーション・トランジション対応
- キーボード操作

## 2.5 データ管理
- 自動保存、PDF/PNG/JPEGエクスポート
- スライドはデフォルトで作成ユーザーのみ閲覧・編集可能。招待URLを発行し、他ユーザーに編集または閲覧権限を付与できる（権限は「オーナー（作成者）」「編集者」「閲覧者」）。
- スライド削除時はまず「ゴミ箱」状態とし、30日後に完全削除。ゴミ箱内のスライドは復元可能。

---

# 3. 技術仕様

## 3.1 フロントエンド
- Vanilla JS, HTML5, CSS3
- Web ComponentsによるUI部品化
- Fabric.jsでキャンバス描画・操作
- Tailwind CSSで高速UI開発
- 状態管理：XState（推奨）

## 3.2 バックエンド
- Python（FastAPI）
- Google Generative AI SDK（Gemini API連携）
- SQLite（SQLModel）
- ファイル保存：サーバー内ファイルシステム

---

# 4. マイルストーン・実装順序（改訂版）

## 4.1 マイルストーン
- **M1: プロジェクトセットアップ・技術検証**
  - リポジトリ作成、CI/CD、開発環境整備、主要技術の動作検証
- **M2: アカウント・認証機能**
  - サインアップ/ログイン、JWT認証、ユーザーデータ管理
- **M3: コアエディターUI**
  - スライド管理、オブジェクト操作、プロパティパネル、レイヤー管理
- **M4: AIアシスタント連携**
  - チャットUI、構成自動生成、デザイン・文章生成
- **M5: アニメーション・トランジション**
  - オブジェクトアニメーション、スライド切替効果
- **M6: プレゼンテーションモード**
  - フルスクリーン再生、キーボード操作、アニメーション再生
- **M7: データ管理・エクスポート**
  - 自動保存、PDF/PNG/JPEGエクスポート、バージョン管理
- **M8: 共同編集・コメント機能**
  - リアルタイム同期、コメント、チャット、権限管理
- **M9: テスト・最終レビュー・ドキュメント整備**
  - 単体/結合/受け入れテスト、ユーザビリティテスト、最終仕様書

## 4.2 実装順序
1. プロジェクトセットアップ・技術検証
2. アカウント・認証機能の実装
3. コアエディターUI（スライド管理・オブジェクト操作・レイヤー管理）
4. テキスト・画像・図形編集機能
5. レイアウト支援・ショートカットキー
6. AIアシスタント連携（チャットUI・構成/デザイン自動生成）
7. アニメーション・トランジション機能
8. プレゼンテーションモード
9. データ管理・エクスポート・バージョン管理
10. 共同編集・コメント・チャット機能
11. テスト・最終レビュー・ドキュメント整備

---

# 5. 機能詳細

## 5.1 コアエディター
- スライド管理UI（サムネイル一覧・順序変更・複製・削除）
- オブジェクト操作（追加・選択・移動・リサイズ・回転・複数選択・コピー・削除・重ね順）
- プロパティパネル（動的切替）
- レイヤー管理（順序変更・表示/非表示・ロック）
- レイアウト支援（スマートガイド・グリッド・ショートカットキー）
- テキスト・画像・図形編集（装飾・フィルター・グループ化等）
- 拡張性：Web Componentsで再利用性確保
- スライド要素としてiframe埋め込みを許可（セキュリティ対策必須）。グラフ要素（例：棒グラフ・円グラフ等）もサポート予定。

## 5.2 AIアシスタント
- チャットUI常駐
- 構成生成・デザイン自動生成・リファイン

## 5.3 アニメーション
- オブジェクトアニメーション・スライドトランジション

## 5.4 プレゼンテーションモード
- フルスクリーン・アニメーション再生・キーボード操作

## 5.5 データ管理
- 自動保存・エクスポート・サーバー連携

---

# 6. AIとの対話によるスライド作成手順（詳細）

1. テーマ入力(ここでカラーのベースを決めれるようにしたい)
   - 右ペインの「Genius Chat」に、作成したいプレゼンのテーマや目的を入力します。
   - 例：「新製品の紹介プレゼン」「AI技術の基礎解説」など。
2. AIによるヒアリング
   - AIが目的・ターゲット・伝えたいポイントなどを追加で質問します。
   - ユーザーはチャット形式で回答。
3. 構成案の自動生成
   - AIがタイトル、目次、各章の見出しや流れをリストで提案します。
   - ユーザーは「この章を追加」「順番を変えて」などの指示が可能。
4. スライド内容の自動生成
   - 確定した構成に基づき、各スライドの本文や要点をAIが自動生成。
   - 例：「この章は箇条書きで」「図解を入れて」などの追加指示も可能。
5. デザイン・レイアウトの提案
   - AIが内容に合ったレイアウトや配色、画像・グラフの挿入を提案。
   - 「全体を青基調に」「グラフを追加」などの要望もチャットで伝えられます。
6. アニメーション・演出の設定
   - 「このスライドに動きをつけて」「タイトルを目立たせて」などの指示で、AIが最適なアニメーションや演出を提案・適用。
7. リアルタイムリファイン
   - 途中で「この部分をもっと簡潔に」「画像を差し替えて」など、細かな修正指示も随時チャットで可能。
8. 完成・エクスポート
   - 完成したスライドは、プレビュー・修正後、PDF/PNG/JPEG形式でエクスポートできます。

---

# 7. 実装方法・使用ライブラリ詳細

## 7.1 フロントエンド
- **Vanilla JS (ES6+)**: 主要なロジック・UI制御をシンプルなJavaScriptで実装。
- **Web Components**: `customElements`・`Shadow DOM`を活用し、再利用可能なUI部品（スライドサムネイル、ツールボックス、プロパティパネル等）を構築。
- **Fabric.js**: キャンバス描画・オブジェクト操作（追加・移動・リサイズ・回転・アニメーション）を担当。`canvas.toJSON()`/`loadFromJSON()`で状態保存・復元。
- **Tailwind CSS**: ユーティリティファーストなCSSフレームワーク。AIによる動的なクラス付与でデザインを柔軟に変更。
- **XState**: UIの状態遷移（AI対話中・編集中・プレビュー中など）を状態マシンで厳密に管理。
- **その他**: 
  - `FileSaver.js`（エクスポート用）
  - `html2canvas`（スライド画像化）
  - `jsPDF`（PDF出力）

## 7.2 バックエンド
- **Python 3.10+**: サーバーサイド全般。
- **FastAPI**: REST API・WebSocketサーバー。自動ドキュメント生成（Swagger UI）。
- **Google Generative AI SDK**: Gemini APIと連携し、AIチャット・構成/デザイン/文章生成を実現。
- **SQLModel**: ORMとしてDBモデルをPythonクラスで定義。SQLiteと連携。
- **SQLite**: 軽量なファイルDB。ユーザー・スライド・履歴などを管理。
- **Starlette**: FastAPIの基盤。WebSocketやCORS対応。
- **Pydantic**: 入出力バリデーション・スキーマ自動生成。
- **Uvicorn**: ASGIサーバーとしてFastAPIを高速実行。
- **その他**:
  - `aiofiles`（非同期ファイル操作）
  - `python-multipart`（ファイルアップロード）

## 7.3 AI連携の実装例
- Gemini APIへのリクエストは`google-generativeai`の`GenerativeModel`クラスを利用。
- ユーザーのチャット入力をAPIに投げ、構成案やデザイン案をJSON形式で受信。
- 受信データをフロントエンドにWebSocketでリアルタイム送信。

## 7.4 データ保存・エクスポート
- スライド状態はFabric.jsのJSONで保存し、DBに紐付け。
- エクスポート時は`html2canvas`で画像化、`jsPDF`でPDF化。
- 画像・ファイルはサーバーの指定ディレクトリに保存。

## 7.5 テスト・CI/CD
- **pytest**（API・DBテスト）
- **Jest**（フロントエンド単体テスト）
- **GitHub Actions**（自動テスト・デプロイ）

---

# 8. アカウント機能（追加）

## 8.1 機能概要
- ユーザーごとにスライドや履歴を管理できるアカウント機能を実装。
- サインアップ・ログイン・ログアウト・パスワードリセット対応。
- Googleアカウント等の外部認証（OAuth）にも対応可能。

## 8.2 画面・UI
- ヘッダー右上に「ログイン」「アカウント」ボタンを設置。
- サインアップ/ログイン用のモーダルダイアログまたは専用ページ。
- ログイン後はユーザー名・アイコン表示、アカウント設定・ログアウトメニュー。

## 8.3 バックエンド実装
- **FastAPI**の`Depends`で認証ガードを実装。
- **SQLModel**で`User`テーブル（id, email, hashed_password, created_at等）を追加。
- パスワードは`bcrypt`等でハッシュ化。
- JWT（JSON Web Token）でセッション管理。
- OAuth認証は`authlib`や`fastapi-users`等のライブラリを利用。

## 8.4 フロントエンド実装
- サインアップ/ログインフォームをWeb Componentsで実装。
- ログイン状態は`localStorage`や`cookie`で管理。
- APIとの通信は`fetch`でトークンを付与。

## 8.5 ユースケース
- 新規登録→メール認証→ログイン→スライド作成・保存
- ログインユーザーのみスライドの保存・履歴・エクスポートが可能
- パスワードリセットやアカウント削除もサポート

---

# 9. 共同編集機能（詳細設計）

## 9.1 機能概要
- 複数ユーザーが同時に同じスライドを編集可能。
- 編集内容はリアルタイムで全ユーザーに反映。
- 編集者のカーソル・選択範囲・操作履歴を可視化。
- コメント・チャット機能でコミュニケーションをサポート。

## 9.2 UI/UX設計
- 編集中ユーザーのアイコン・名前を画面上部に表示。
- 他ユーザーの選択オブジェクトやカーソル位置を色分け表示。
- コメントはスライド単位・オブジェクト単位で付与可能。
- 画面右側にリアルタイムチャットパネルを設置。

## 9.3 バックエンド設計
- **WebSocket**（FastAPI/Starlette）でリアルタイム通信を実装。
- スライドごとに「ルーム」を生成し、参加ユーザーを管理。
- 編集操作（オブジェクト追加・移動・削除・プロパティ変更等）は差分データとして送信。
- 衝突解決は「楽観的ロック」＋「最終編集者優先」または「OT（Operational Transformation）」方式を検討。
- コメント・チャットはDB（`SlideComment`テーブル等）に保存。

## 9.4 フロントエンド設計
- WebSocketクライアントでサーバーと常時接続。
- 編集操作を即時ローカル反映し、サーバーへ送信。
- サーバーからの差分データを受信し、他ユーザーの操作を反映。
- 他ユーザーのカーソル・選択範囲を色付きで表示。
- コメント・チャットUIをWeb Componentsで実装。

## 9.5 権限・履歴管理
- オーナー・編集者・閲覧者の権限を設定可能。
- 編集履歴はユーザーごとに記録し、差分表示・ロールバックも可能。
- 編集履歴はテキスト内容の変更のみ記録し、画像や図形等の変更は履歴に残さない。履歴は直近5回分まで保存し、任意の変更前までロールバック可能。
- 共同編集の招待はメール・リンク共有で実現。

## 9.6 使用技術・ライブラリ
- **FastAPI/Starlette WebSocket**: リアルタイム通信
- **Yjs**や**ShareDB**（OT/CRDTライブラリ）: 差分同期・衝突解決
- **SQLModel**: コメント・履歴のDB管理
- **uuid**: ルームID・ユーザーID生成

---

## データ保存設計

### アカウント情報（accountsテーブル）
- id（主キー, 整数, 自動採番）
- username（テキスト, ユニーク）
- email（テキスト, ユニーク）
- password_hash（テキスト, ハッシュ化済みパスワード）
- created_at（作成日時, デフォルト現在時刻）
- updated_at（更新日時, デフォルト現在時刻）

### スライド情報（slidesテーブル）
- id（主キー, 整数, 自動採番）
- account_id（外部キー, accounts.id）
- title（テキスト, スライドタイトル）
- content（テキスト, スライド内容JSON等）
- file_path（テキスト, 実体ファイルの保存パス）
- created_at（作成日時, デフォルト現在時刻）
- updated_at（更新日時, デフォルト現在時刻）

- アカウント情報とスライド情報はテーブルを分割し、1アカウントが複数スライドを持てるリレーションとする。
- スライドの実体ファイル（PDF/画像等）はfile_pathでサーバー上の保存場所を管理。
- スライド内容はcontentカラムにJSON等で保存し、柔軟な拡張に対応。

この構成はフロントエンド（Vanilla JS+Web Components+Tailwind CSS）とバックエンド（FastAPI+SQLModel+Gemini API）を分離し、拡張性・保守性を重視しています。
# サイトページ構成・UI設計詳細

## ページ一覧・役割・主要UI要素

1. **トップページ**
   - サービス紹介、ログイン/サインアップ導線、特徴紹介、フッター
2. **サインアップページ**
   - 新規登録フォーム、利用規約同意、エラーメッセージ表示
3. **ログインページ**
   - ログインフォーム、パスワードリセット、外部認証ボタン
4. **スライド一覧ページ**
   - スライドサムネイル一覧、新規作成ボタン、複製・削除・ゴミ箱遷移
5. **スライドエディターページ**
   - キャンバス、AIチャットUI、プロパティパネル、レイヤー管理、アニメーション設定
6. **スライド閲覧ページ**
   - プレゼンテーションモード、フルスクリーン、アニメーション再生
7. **アカウント設定ページ**
   - プロフィール編集、パスワード変更、外部認証連携
8. **ゴミ箱ページ**
   - 削除済みスライド一覧、復元・完全削除
9. **共同編集招待ページ**
   - 招待URL入力、権限設定、参加確認
10. **404ページ**
    - エラーメッセージ、トップページへのリンク

## ページ遷移イメージ
- トップ→ログイン/サインアップ→スライド一覧→エディター/閲覧/ゴミ箱/招待
- エディター⇔スライド一覧、エディター→閲覧、各ページからアカウント設定へ遷移可

---

## 共通CSS設計方針

- サイト全体で統一感を持たせるため、共通CSS（例：`styles/common.css`）を作成
- 主な設計指針：
  - **カラーパレット**：ブランドカラー・アクセントカラー・背景色・テキスト色を定義
  - **タイポグラフィ**：見出し・本文・キャプションのフォントサイズ・行間・ウェイトを統一
  - **レイアウト**：グリッド/フレックスレイアウト、余白・パディングの基準化
  - **共通コンポーネント**：ボタン、フォーム、モーダル、カード、ナビゲーション等のスタイルを統一
  - **レスポンシブ対応**：モバイル・タブレット・PCでの見やすさを確保
- Tailwind CSS等のユーティリティフレームワークを活用し、カスタムクラスは`common.css`で補完

---